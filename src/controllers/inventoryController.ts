import Database from "better-sqlite3";

// Open (or create) the SQLite database file (using the same file as your other controllers)
const db = new Database("game.db");

// ───────────────────────────────
// Create the Inventory table if it does not exist.
// Columns: id is auto-incremented, playFabId links to the account, then ItemId, DisplayName,
// CatalogVersion, ItemInstanceId, PurchaseDate, UnitPrice and Annotation.
db.exec(`
  CREATE TABLE IF NOT EXISTS Inventory (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    playFabId TEXT,
    ItemId TEXT,
    DisplayName TEXT,
    CatalogVersion TEXT,
    ItemInstanceId TEXT,
    PurchaseDate DATETIME,
    UnitPrice INTEGER,
    Annotation TEXT,
    ItemClass TEXT,
    FOREIGN KEY (playFabId) REFERENCES Accounts(playFabId)
  );
`);

// ───────────────────────────────
// Interfaces
export interface InventoryItem {
  id?: number;             // Optional: auto-generated by the database on insert.
  playFabId: string;       // Identifier of the account owning this item.
  ItemId: string;          // Identifier of the item (e.g., "hero_Ash")
  DisplayName: string;     // Human-readable name (e.g., "Cyber Girl")
  CatalogVersion: string;  // Catalog version string (e.g., "Fight_001")
  ItemInstanceId: string;  // Unique instance id for this specific copy of the item.
  PurchaseDate: string;    // ISO string timestamp of when the item was purchased/added.
  UnitPrice: number;       // Price for the item (could be 0 if free).
  Annotation: string;      // Additional context or classification (e.g., "CommonSummon" or "ShardsHeroBlue")
  ItemClass?: string;
}

// ───────────────────────────────
// Utility Functions
/**
 * createInventoryEntry
 * A utility function that creates an InventoryItem object.
 *
 * @param playFabId The owner's account ID.
 * @param ItemId The item identifier.
 * @param DisplayName A display name for the item.
 * @param CatalogVersion The catalog version string.
 * @param ItemInstanceId A unique identifier for this instance of the item.
 * @param PurchaseDate A Date object or string for when the item was purchased.
 * @param UnitPrice The unit price (or cost) of the item.
 * @param Annotation Additional Annotation.
 * @param ItemClass Optional ItemClass
 * @returns An InventoryItem object.
 */
export function createInventoryEntry(
  playFabId: string,
  ItemId: string,
  DisplayName: string,
  CatalogVersion: string,
  ItemInstanceId: string,
  PurchaseDate: Date | string,
  UnitPrice: number,
  Annotation: string,
  ItemClass?: string,
): InventoryItem {
  return {
    playFabId,
    ItemId,
    DisplayName,
    CatalogVersion,
    ItemInstanceId,
    PurchaseDate: typeof PurchaseDate === "string" ? PurchaseDate : PurchaseDate.toISOString(),
    UnitPrice,
    Annotation,
    ItemClass
  };
}

// ───────────────────────────────
// Database Functions for Inventory
/**
 * addInventoryItem
 * Inserts a new inventory record into the Inventory table.
 *
 * @param item The InventoryItem to insert.
 */
export function addInventoryItem(item: InventoryItem): void {
  const stmt = db.prepare(`
    INSERT INTO Inventory (
      playFabId, ItemId, DisplayName, CatalogVersion, ItemInstanceId, PurchaseDate, UnitPrice, Annotation, ItemClass
    )
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
  `);
  stmt.run(
    item.playFabId,
    item.ItemId,
    item.DisplayName,
    item.CatalogVersion,
    item.ItemInstanceId,
    item.PurchaseDate,
    item.UnitPrice,
    item.Annotation,
    item.ItemClass ?? ""
  );
}

/**
 * getInventoryItems
 * Retrieves all inventory records for a given account.
 *
 * @param playFabId The owner's PlayFabId.
 * @returns An array of InventoryItem.
 */
export function getInventoryItems(playFabId: string): InventoryItem[] {
  const stmt = db.prepare(`SELECT * FROM Inventory WHERE playFabId = ?`);
  return stmt.all(playFabId) as InventoryItem[];
}

/**
 * updateInventoryItem
 * Updates an existing inventory record (by its id).
 *
 * @param id The primary key of the inventory record.
 * @param updateFields An object with the fields to update.
 */
export function updateInventoryItem(
  id: number,
  updateFields: Partial<Omit<InventoryItem, "id" | "playFabId">>
): void {
  const fields = Object.keys(updateFields);
  if (fields.length === 0) return; // Nothing to update.
  
  const setClause = fields.map(field => `${field} = ?`).join(", ");
  const stmt = db.prepare(`UPDATE Inventory SET ${setClause} WHERE id = ?`);
  const values = fields.map(field => (updateFields as any)[field]);
  values.push(id);
  stmt.run(...values);
}

/**
 * removeInventoryItem
 * Deletes an inventory record by its id.
 *
 * @param id The primary key id of the inventory record to delete.
 */
export function removeInventoryItem(id: number): void {
  const stmt = db.prepare(`DELETE FROM Inventory WHERE id = ?`);
  stmt.run(id);
}

export function clearInventoryForAccount(playFabId: string): void {
  const stmt = db.prepare(`DELETE FROM Inventory WHERE playFabId = ?`);
  stmt.run(playFabId);
}
